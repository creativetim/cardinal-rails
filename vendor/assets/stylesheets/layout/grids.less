/* ========================================================================== *\
   Layout -> Grids ($layout-grids)
\* ========================================================================== */

/**
 * Grid System
 * Hat tip to @csswizardry for the `display: inline-block` grid technique.
 *
 * @link http://cbrac.co/1RvPb53
 */

/**
 * Grid containers
 * 1. Remove default styles in case `.grid` is on a <ul> or <ol> element.
 * 2. Default gutter width.
 * 3. Hack to remove `inline-block` whitespace. This causes some issues on pre-
 *    Jellybean and Jellybean versions of Android
 *
 *    @link http://cbrac.co/1xh3hs0
 *    @link http://cbrac.co/16xcjcl
 */

.grid {
  margin: 0;                                /* 1 */
  .to-rem(margin-left, -@grid-gutter-base); /* 2 */
  padding: 0;                               /* 1 */
  list-style: none;                         /* 1 */
  font-size: @font-size-0;                  /* 3 */
}

/**
 * Grid items
 * 1. Remove default styles in case `.grid-item` is on an <li> element.
 * 2. `.grid-item` elements are 100% width by default.
 * 3. Default gutter width = @grid-gutter-base.
 * 4. Ensure `.grid-item` is aligned to the top of its container.
 * 5. Reset font size to the global default.
 */

.grid-item {
  display: inline-block;
  margin-left: 0;                           /* 1 */
  width: 100%;                              /* 2 */
  .to-rem(padding-left, @grid-gutter-base); /* 3 */
  vertical-align: top;                      /* 4 */
  .to-rem(font-size, @font-size);           /* 5 */
}

/**
 * Grid items rendering order
 * .grid-ltr = left-to-right (default)
 * .grid-rtl = right-to-left
 */

.breakpoint-prefixes({
  .@{breakpoint-prefix}grid-ltr {
    direction: ltr;
    text-align: left;

    > .grid-item {
      direction: rtl;
      text-align: left;
    }
  }

  .@{breakpoint-prefix}grid-rtl {
    direction: rtl;
    text-align: left;

    > .grid-item {
      direction: ltr;
      text-align: left;
    }
  }
});

/**
 * Grid gutters
 */

.breakpoint-prefixes({
  // No gutters
  .@{breakpoint-prefix}gutter-0,
  .@{breakpoint-prefix}gutter-none {
    margin-left: 0;
  }

  .@{breakpoint-prefix}gutter-0 > .grid-item,
  .@{breakpoint-prefix}gutter-none > .grid-item {
    padding-left: 0;
  }

  // 1px gutters
  .@{breakpoint-prefix}gutter-1px {
    .to-rem(margin-left, -@grid-gutter-1px);
  }

  .@{breakpoint-prefix}gutter-1px > .grid-item {
    .to-rem(padding-left, @grid-gutter-1px);
  }

  // Half gutters
  [class~="@{breakpoint-prefix}gutter-1/2"],
  .@{breakpoint-prefix}gutter-half {
    .to-rem(margin-left, -@grid-gutter-half);
  }

  [class~="@{breakpoint-prefix}gutter-1/2"] > .grid-item,
  .@{breakpoint-prefix}gutter-half > .grid-item {
    .to-rem(padding-left, @grid-gutter-half);
  }

  // Whole gutters
  .@{breakpoint-prefix}gutter-1,
  .@{breakpoint-prefix}gutter-whole {
    .to-rem(margin-left, -@grid-gutter-base);
  }

  .@{breakpoint-prefix}gutter-1 > .grid-item,
  .@{breakpoint-prefix}gutter-whole > .grid-item {
    .to-rem(padding-left, @grid-gutter-base);
  }

  // Double gutters
  .@{breakpoint-prefix}gutter-2,
  .@{breakpoint-prefix}gutter-double {
    .to-rem(margin-left, -@grid-gutter-double);
  }

  .@{breakpoint-prefix}gutter-2 > .grid-item,
  .@{breakpoint-prefix}gutter-double > .grid-item {
    .to-rem(padding-left, @grid-gutter-double);
  }
});


/**
 * Grid item alignment
 */

.grid-align-top > .grid-item {
  vertical-align: top;
}

.grid-align-middle > .grid-item {
  vertical-align: middle;
}

.grid-align-bottom > .grid-item {
  vertical-align: bottom;
}

.grid-align-left {
  text-align: left;

  > .grid-item {
    text-align: left;
  }
}

.grid-align-center {
  text-align: center;

  > .grid-item {
    text-align: left;
  }
}

.grid-align-right {
  text-align: right;

  > .grid-item {
    text-align: left;
  }
}

/**
 * Grid item "shrink wrap"
 *
 * Force `.grid-item` to be the width of its content.
 */

.grid-shrink-wrap > .grid-item {
  width: auto;
}
